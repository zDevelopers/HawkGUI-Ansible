[uwsgi]
# Abort on unknown configuration options.
strict              = true

uid                 = {{ app_user }}
gid                 = {{ app_group }}
umask               = 022

chdir               = {{ root }}
virtualenv          = {{ venv }}
home                = {{ venv }}

module = hawk.wsgi:application

master    = true
processes = {{ core_workers }}

# Create a UNIX socket that the web server can access.
# Nginx sends HTTP requests directly so we need an http socket here
# (the default being a uwsgi-protocol socket).
protocol = http

# Systemd handles the socket directly. The app is started when the socket is
# first accessed. As this app is typically used sporadically, it will stop
# if idle, and be launched again by systemd when a new request is made.
die-on-idle = True

vacuum = true

# We need to increase the default http buffer size.
buffer-size = 32768

# The number of worker processes to create.
workers             = {{ core_workers }}

# Create multiple threads per worker.
enable-threads      = true
threads             = {{ core_workers }}

# Use cheaper to kill off idle workers. This doesn't always work well; for
# example, on Debian 7 with recently uWSGI versions it appears to sometimes
# deadlock the application when killing a worker.  If this isn't specified,
# uWSGI will just create the maximum number of workers at all times.
cheaper-algo        = spare
cheaper             = 1
cheaper-initial     = 1
cheaper-step        = 1

# Log errors and requests.
logto               = {{ logs }}/uwsgi.log
log-date            = true
log-prefix          = [hawk]
log-format          = "[pid: %(pid)|app: -|req: -/-] %(addr) (%(user)) [%(vars) vars in %(pktsize) bytes] [%(ctime)] %(method) %(uri) => generated %(rsize) bytes in %(msecs) msecs (%(proto) %(status)) %(headers) headers in %(hsize) bytes (%(switches) switches on core %(core))"
logfile-chown       = true

# Required environment variables
env = DJANGO_SETTINGS_MODULE={{ settings_module }}
env = HAWK_CONFIG={{ data }}/config.toml
